/*Generated by WaveMaker Studio*/

package com.test.highscoredb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.test.highscoredb.Table13;

/**
 * Service object for domain model class Table13.
 *
 * @see {@link Table13}
 */
public interface Table13Service {

    /**
     * Creates a new Table13.
     *
     * @param table13 The information of the created CompositeTable.
     * @return The created Table13.
     */
	Table13 create(Table13 table13);


	/**
	 * Finds Table13 by id.
	 *
	 * @param table13Id The id of the wanted Table13.
	 * @return The found Table13. If no Table13 is found, this method returns null.
	 */
	Table13 getById(Integer table13Id) throws EntityNotFoundException;

    /**
	 * Finds Table13 by unique key.
	 *
	 * @param column2 column2 value.
	 * @return The found Table13.
     * @throws EntityNotFoundException if no Table13 found.
	 */
    Table13 getByColumn2(String column2)throws EntityNotFoundException;

	/**
	 * Updates the information of a Table13.
	 *
	 * @param table13 The information of the updated Table13.
	 * @return The updated Table13.
     *
	 * @throws EntityNotFoundException if no Table13 is found with given id.
	 */
	Table13 update(Table13 table13) throws EntityNotFoundException;

    /**
	 * Deletes a Table13.
	 *
	 * @param table13Id The id of the deleted Table13.
	 * @return The deleted Table13.
     *
	 * @throws EntityNotFoundException if no Table13 is found with the given id.
	 */
	Table13 delete(Integer table13Id) throws EntityNotFoundException;

	/**
	 * Finds all Table13s.
	 *
	 * @return A list of Table13s.
	 */
    @Deprecated
	Page<Table13> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Table13s.
	 * @return A list of Table13s.
	 */
    Page<Table13> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Table13s in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Table13.
	 */
	long count(String query);


}

