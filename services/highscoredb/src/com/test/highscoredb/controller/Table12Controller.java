/*Generated by WaveMaker Studio*/
package com.test.highscoredb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.test.highscoredb.Table12;
import com.test.highscoredb.service.Table12Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table12.
 * @see Table12
 */
@RestController("highscoredb.Table12Controller")
@RequestMapping("/highscoredb/Table12")
@Api(value = "Table12Controller", description = "Exposes APIs to work with Table12 resource.")
public class Table12Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table12Controller.class);

    @Autowired
    @Qualifier("highscoredb.Table12Service")
    private Table12Service table12Service;

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table12Service instance
	 */
    protected void setTable12Service(Table12Service service) {
        this.table12Service = service;
    }

    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of Table12 instances matching the search criteria.")
    public Page<Table12> findTable12s(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query, @ApiParam(value = "") Pageable pageable) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(query, pageable);
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table12 instance.")
    public Table12 createTable12(@RequestBody @ApiParam(value = "") Table12 table12) {
        LOGGER.debug("Create Table12 with information: {}", table12);
        table12 = table12Service.create(table12);
        LOGGER.debug("Created Table12 with information: {}", table12);
        return table12;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table12 instances.")
    public Long countTable12s(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query) {
        LOGGER.debug("counting Table12s");
        return table12Service.count(query);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable12s(@PathVariable("exportType") @ApiParam(value = "") ExportType exportType, @RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query, @ApiParam(value = "") Pageable pageable) {
        return table12Service.export(exportType, query, pageable);
    }

    /**
     * @deprecated Use {@link #findTable12s(String, Pageable)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of Table12 instances matching the search criteria.")
    public Page<Table12> findTable12s(@ApiParam(value = "") Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table12 instance associated with the given id.")
    public Table12 getTable12(@PathVariable("id") @ApiParam(value = "") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table12 with id: {}", id);
        Table12 foundTable12 = table12Service.getById(id);
        LOGGER.debug("Table12 details with id: {}", foundTable12);
        return foundTable12;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table12 instance associated with the given id.")
    public Table12 editTable12(@PathVariable("id") @ApiParam(value = "") Integer id, @RequestBody @ApiParam(value = "") Table12 table12) throws EntityNotFoundException {
        LOGGER.debug("Editing Table12 with id: {}", table12.getId());
        table12.setId(id);
        table12 = table12Service.update(table12);
        LOGGER.debug("Table12 details with id: {}", table12);
        return table12;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table12 instance associated with the given id.")
    public boolean deleteTable12(@PathVariable("id") @ApiParam(value = "") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table12 with id: {}", id);
        Table12 deletedTable12 = table12Service.delete(id);
        return deletedTable12 != null;
    }
}
