/*Generated by WaveMaker Studio*/
package com.test.highscoredb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.test.highscoredb.Table13;
import com.test.highscoredb.service.Table13Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table13.
 * @see Table13
 */
@RestController("highscoredb.Table13Controller")
@RequestMapping("/highscoredb/Table13")
@Api(value = "Table13Controller", description = "Exposes APIs to work with Table13 resource.")
public class Table13Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table13Controller.class);

    @Autowired
    @Qualifier("highscoredb.Table13Service")
    private Table13Service table13Service;

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table13Service instance
	 */
    protected void setTable13Service(Table13Service service) {
        this.table13Service = service;
    }

    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of Table13 instances matching the search criteria.")
    public Page<Table13> findTable13s(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query, @ApiParam(value = "") Pageable pageable) {
        LOGGER.debug("Rendering Table13s list");
        return table13Service.findAll(query, pageable);
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table13 instance.")
    public Table13 createTable13(@RequestBody @ApiParam(value = "") Table13 table13) {
        LOGGER.debug("Create Table13 with information: {}", table13);
        table13 = table13Service.create(table13);
        LOGGER.debug("Created Table13 with information: {}", table13);
        return table13;
    }

    @RequestMapping(value = "/column2/{column2}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the matching Table13 with given unique key values.")
    public Table13 getByColumn2(@PathVariable("column2") @ApiParam(value = "") String column2) {
        LOGGER.debug("Getting Table13 with uniques key Column2");
        return table13Service.getByColumn2(column2);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table13 instances.")
    public Long countTable13s(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query) {
        LOGGER.debug("counting Table13s");
        return table13Service.count(query);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable13s(@PathVariable("exportType") @ApiParam(value = "") ExportType exportType, @RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query, @ApiParam(value = "") Pageable pageable) {
        return table13Service.export(exportType, query, pageable);
    }

    /**
     * @deprecated Use {@link #findTable13s(String, Pageable)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of Table13 instances matching the search criteria.")
    public Page<Table13> findTable13s(@ApiParam(value = "") Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table13s list");
        return table13Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table13 instance associated with the given id.")
    public Table13 getTable13(@PathVariable("id") @ApiParam(value = "") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table13 with id: {}", id);
        Table13 foundTable13 = table13Service.getById(id);
        LOGGER.debug("Table13 details with id: {}", foundTable13);
        return foundTable13;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table13 instance associated with the given id.")
    public Table13 editTable13(@PathVariable("id") @ApiParam(value = "") Integer id, @RequestBody @ApiParam(value = "") Table13 table13) throws EntityNotFoundException {
        LOGGER.debug("Editing Table13 with id: {}", table13.getId());
        table13.setId(id);
        table13 = table13Service.update(table13);
        LOGGER.debug("Table13 details with id: {}", table13);
        return table13;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table13 instance associated with the given id.")
    public boolean deleteTable13(@PathVariable("id") @ApiParam(value = "") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table13 with id: {}", id);
        Table13 deletedTable13 = table13Service.delete(id);
        return deletedTable13 != null;
    }
}
